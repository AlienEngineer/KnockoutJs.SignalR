<h3>Tasks</h3>

<form data-bind="submit: addTask">
    Add task:
    <input data-bind="value: newTaskText" placeholder="What needs to be done?" />
    <button type="submit">Add</button>
</form>

<ul data-bind="foreach: tasks, visible: tasks().length > 0">
    <li>
        <input type="checkbox" data-bind="checked: isDone" />
        <input data-bind="value: title, disable: isDone, valueUpdate: 'afterkeydown'" />
        <a href="#" data-bind="click: $parent.removeTask">Delete</a>
    </li>
</ul>

You have <b data-bind="text: incompleteTasks().length">&nbsp;</b> incomplete task(s)
<span data-bind="visible: incompleteTasks().length == 0">- it's beer time!</span>


@section scripts {
    <script src="~/signalr/hubs"></script>
    <script>

        function Task(data) {
            this.id = ko.observable(data.Id);
            this.title = ko.observableRemote(data.Title, 'title', this.id);
            this.isDone = ko.observable(data.IsDone);
        }

        function TaskListViewModel() {
            // Data
            var self = this;
            self.tasks = ko.observableArray([]);
            self.newTaskText = ko.observable();
            self.incompleteTasks = ko.computed(function () {
                return ko.utils.arrayFilter(self.tasks(), function (task) { return !task.isDone() && !task._destroy });
            });

            // Operations
            self.addTask = function () {
                self.tasks.push(new Task({ title: this.newTaskText() }));
                self.newTaskText("");
            };

            self.removeTask = function (task) {
                self.tasks.destroy(task);
            };

            // Load initial state from server, convert it to Task instances, then populate self.tasks
            $.getJSON("api/tasks", function (allData) {
                var mappedTasks = $.map(allData, function (item) { return new Task(item); });
                self.tasks(mappedTasks);
            });

            // this function will be called when everything is ready
            self.init = function () {

                // Remote called functions
                self.client.addTask = function (task) {
                    self.tasks.push(new Task(task));
                };

            };
        }

        ko.applyBindings(new TaskListViewModel());

    </script>
}

